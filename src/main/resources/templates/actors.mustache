<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>üé≠ Î∞∞Ïö∞ Î™©Î°ù</title>
    <style>
        body {
            font-family: "Apple SD Gothic Neo", "Noto Sans KR", sans-serif;
            margin: 0;
            background-color: #f9fafb;
        }
        header {
            background-color: #fff;
            padding: 20px 40px;
            border-bottom: 1px solid #e5e8eb;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        header h1 {
            font-size: 1.5rem;
            font-weight: 700;
        }
        .search-box {
            display: flex;
            gap: 8px;
        }
        .search-box input {
            padding: 10px 14px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            outline: none;
        }
        .search-box button {
            background-color: #3182f6;
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 10px 16px;
            cursor: pointer;
        }
        main {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            padding: 40px;
        }
        .actor-card {
            background-color: #fff;
            border-radius: 16px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            padding: 20px;
            text-align: center;
            transition: transform 0.15s ease, box-shadow 0.15s ease;
            position: relative;
        }
        .actor-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(0,0,0,0.08);
        }
        .actor-photo {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 12px;
            background-color: #f3f4f6;
        }
        .actor-name {
            font-weight: 600;
            font-size: 1.1rem;
        }
        .actor-age {
            color: #6b7280;
            font-size: 0.9rem;
        }
        .actions {
            margin-top: 10px;
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        .btn {
            border: none;
            border-radius: 8px;
            padding: 6px 12px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        .btn-edit {
            background-color: #3182f6;
            color: #fff;
        }
        .btn-delete {
            background-color: #ef4444;
            color: #fff;
        }
        .delete-checkbox {
            position: absolute;
            top: 15px;
            left: 15px;
            transform: scale(1.2);
        }

        /* Î™®Îã¨ (Toss Ïä§ÌÉÄÏùº) */
        .modal-overlay {
            position: fixed;
            inset: 0;
            background: rgba(0,0,0,0.4);
            display: none;
            align-items: center;
            justify-content: center;
        }
        .modal {
            background: #fff;
            border-radius: 16px;
            width: 400px;
            padding: 30px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.1);
            animation: fadeIn 0.2s ease;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .modal h2 {
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 1.2rem;
            font-weight: 700;
        }
        .modal form {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        .modal input[type="text"],
        .modal input[type="number"],
        .modal input[type="file"] {
            padding: 10px 12px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            outline: none;
        }
        .modal-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }
        .btn-cancel {
            background-color: #e5e7eb;
        }
        .btn-save {
            background-color: #3182f6;
            color: white;
        }
        .action-bar {
            padding: 10px 40px;
            display: flex;
            justify-content: flex-end;
            background: #fff;
            border-bottom: 1px solid #e5e8eb;
        }
    </style>
</head>
<body>
<header>
    <h1>üé≠ Î∞∞Ïö∞ Î™©Î°ù</h1>
    <form class="search-box" method="get" action="/actors">
        <input type="text" name="name" placeholder="Î∞∞Ïö∞ Ïù¥Î¶Ñ Í≤ÄÏÉâ">
        <button type="submit">Í≤ÄÏÉâ</button>
    </form>
</header>

<div class="action-bar">
    <button class="btn btn-edit" onclick="openModal()">‚ûï ÏÉà Î∞∞Ïö∞ Îì±Î°ù</button>
    <button class="btn btn-delete" onclick="deleteSelected()">üóë ÏÑ†ÌÉù ÏÇ≠Ï†ú</button>
</div>

<main>
    {{#actors}}
        <div class="actor-card" data-id="{{id}}">
            <input type="checkbox" class="delete-checkbox" value="{{id}}">
            <img class="actor-photo" src="/actors/{{id}}/photo" alt="{{name}}">
            <div class="actor-name">{{name}}</div>
            <div class="actor-age">{{age}}ÏÑ∏</div>
            <div class="actions">
                <button class="btn btn-edit" onclick="openModal({{id}}, '{{name}}', {{age}})">ÏàòÏ†ï</button>
            </div>
        </div>
    {{/actors}}
</main>

<!-- Î™®Îã¨ -->
<div class="modal-overlay" id="modal">
    <div class="modal">
        <h2 id="modal-title">Î∞∞Ïö∞ Îì±Î°ù</h2>
        <form id="actorForm" enctype="multipart/form-data">
            <input type="hidden" id="actorId" name="id">
            <input type="text" name="name" id="actorName" placeholder="Î∞∞Ïö∞ Ïù¥Î¶Ñ" required>
            <input type="number" name="age" id="actorAge" placeholder="ÎÇòÏù¥" required>
            <input type="file" name="photo" id="actorPhoto" accept="image/*">
            <div class="modal-buttons">
                <button type="button" class="btn btn-cancel" onclick="closeModal()">Ï∑®ÏÜå</button>
                <button type="submit" class="btn btn-save">Ï†ÄÏû•</button>
            </div>
        </form>
    </div>
</div>

<script>
    const modal = document.getElementById('modal');
    const form = document.getElementById('actorForm');
    const title = document.getElementById('modal-title');

    function openModal(id, name, age) {
        if (id) {
            title.textContent = 'Î∞∞Ïö∞ ÏàòÏ†ï';
            document.getElementById('actorId').value = id;
            document.getElementById('actorName').value = name;
            document.getElementById('actorAge').value = age;
            document.getElementById('actorPhoto').value = '';
        } else {
            title.textContent = 'ÏÉà Î∞∞Ïö∞ Îì±Î°ù';
            form.reset();
            document.getElementById('actorId').value = '';
        }
        modal.style.display = 'flex';
    }

    function closeModal() {
        modal.style.display = 'none';
    }

    // Îì±Î°ù/ÏàòÏ†ï AJAX Ï≤òÎ¶¨
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const id = document.getElementById('actorId').value;
        const url = id ? `/actors/${id}/update` : '/actors/ins';

        const actor = new FormData(form);

        try {
            const res = await fetch(url, { method: 'POST', body: actor });
            if (res.ok) {
                closeModal();
                location.reload();
            } else {
                alert('Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù');
            }
        } catch (err) {
            console.error(err);
            alert('ÏÑúÎ≤ÑÏôÄ ÌÜµÏã† Ï§ë Ïò§Î•ò Î∞úÏÉù');
        }
    });

    // ÏÑ†ÌÉù ÏÇ≠Ï†ú AJAX
    function deleteSelected() {
        const ids = Array.from(document.querySelectorAll('.delete-checkbox:checked'))
                .map(cb => cb.value);

        if (ids.length === 0) {
            alert('ÏÇ≠Ï†úÌï† Î∞∞Ïö∞Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.');
            return;
        }

        if (!confirm(`${ids.length}Î™ÖÏùò Î∞∞Ïö∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`)) return;

        fetch('/actors/delete', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(ids)
        })
                .then(res => {
                    if (res.ok) location.reload();
                    else alert('ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò Î∞úÏÉù');
                })
                .catch(err => {
                    console.error(err);
                    alert('ÏÑúÎ≤ÑÏôÄ ÌÜµÏã† Ï§ë Ïò§Î•ò Î∞úÏÉù');
                });
    }
</script>
</body>
</html>
